rgl::lines3d(x=c(edge.source.x[c(count)],edge.target.x[c(count)]),
y=c(edge.source.y[c(count)],edge.target.y[c(count)]),
z=c(edge.source.z[c(count)],edge.target.z[c(count)]),
add=TRUE)
count=count+1
}
library("RNeo4j")
library("rgl")
graph=RNeo4j::startGraph("192.168.99.100:7474/db/data",username="neo4j",password="neo")
nodes.x=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.x")))
nodes.y=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.y")))
nodes.z=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.z")))
edge.source.x=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.x")))
edge.source.y=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.y")))
edge.source.z=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.z")))
edge.target.x=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.x")))
edge.target.y=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.y")))
edge.target.z=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.z")))
rgl::plot3d(x=nodes.x,y=nodes.y,z=nodes.z,xlab="x",ylab="y",zlab="z",size=10,col="red",box=FALSE)
rgl::planes3d(a=0,b=0,c=1,d=(-1)*nodes.z,alpha=0.05,add=TRUE)
count=1
while(count<=length(edge.source.x)){
rgl::lines3d(x=c(edge.source.x[c(count)],edge.target.x[c(count)]),
y=c(edge.source.y[c(count)],edge.target.y[c(count)]),
z=c(edge.source.z[c(count)],edge.target.z[c(count)]),
add=TRUE)
count=count+1
}
rgl::plot3d(x=nodes.x,y=nodes.y,z=nodes.z,xlab="x",ylab="y",zlab="z",size=10,col="red",box=FALSE)
rgl::planes3d(a=0,b=0,c=1,d=(-1)*nodes.z,alpha=0.05,add=TRUE)
count=1
while(count<=length(edge.source.x)){
rgl::lines3d(x=c(edge.source.x[c(count)],edge.target.x[c(count)]),
y=c(edge.source.y[c(count)],edge.target.y[c(count)]),
z=c(edge.source.z[c(count)],edge.target.z[c(count)]),
add=TRUE)
count=count+1
if(count%%1000==0){
print(count)
}
}
rgl::plot3d(x=nodes.x,y=nodes.y,z=nodes.z,xlab="x",ylab="y",zlab="z",size=10,col="red",box=FALSE)
rgl::planes3d(a=0,b=0,c=1,d=(-1)*nodes.z,alpha=0.05,add=TRUE)
count=1
while(count<=length(edge.source.x)){
rgl::lines3d(x=c(edge.source.x[c(count)],edge.target.x[c(count)]),
y=c(edge.source.y[c(count)],edge.target.y[c(count)]),
z=c(edge.source.z[c(count)],edge.target.z[c(count)]),
add=TRUE)
count=count+1
if(count%%1000==0){
print(count)
}
print(count)
}
rgl::plot3d(x=nodes.x,y=nodes.y,z=nodes.z,xlab="x",ylab="y",zlab="z",size=10,col="red",box=FALSE)
rgl::planes3d(a=0,b=0,c=1,d=(-1)*nodes.z,alpha=0.05,add=TRUE)
count=1
while(count<=length(edge.source.x)){
rgl::lines3d(x=c(edge.source.x[c(count)],edge.target.x[c(count)]),
y=c(edge.source.y[c(count)],edge.target.y[c(count)]),
z=c(edge.source.z[c(count)],edge.target.z[c(count)]),
add=TRUE)
count=count+1
if(count%%500==0){
print(count)
}
}
rnorm(100)
rbind(c(1,3,5),c(2,4,6))
c(rbind(c(1,3,5),c(2,4,6)))
load("F:/Atlas/Atlas-of-Learning/R/.RData")
nodes.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
edges.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
graph=RNeo4j::startGraph("192.168.99.100:7474/db/data",username="neo4j",password="neo")
nodes.x=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.x")))
nodes.y=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.y")))
nodes.z=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.z")))
nodes.text=(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.name")))
nodes.id=(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.id")))
nodes.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
edges.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
nodes.dataFrame
nodes.dataFrame[z=c(1,2)]
nodes.dataFrame['z'=c(1,2)]
nodes.dataFrame[c(1,2)]
nodes.dataFrame[1:2,]
nodes.dataFrame[1:2]
nodes.dataFrame[1:2,]
nodes.dataFrame[c(1,2),]
nodes.dataFrame[c(1,2),]$name
nodes.dataFrame[c(1,2),]$name[1]
nodes.dataFrame[c(1,2),]$name[1]=='libproxy0.4-cil'
nodes.dataFrame[which(nodes.dataFrame$id == c(1,2,3,4))]
nodes.dataFrame$id
nodes.dataFrame$id == c(1,2,3,4)
nodes.dataFrame[which(nodes.dataFrame$id = 1]
nodes.dataFrame[which(nodes.dataFrame$id == 1]
nodes.dataFrame[which(nodes.dataFrame$id == 1)]
nodes.dataFrame[which(nodes.dataFrame$id == 1),]
nodes.dataFrame[which(nodes.dataFrame$id == c(1,2,3,4)),]
nodes.dataFrame[which(nodes.dataFrame$id == c(1,2,3,4,1)),]
queryTest <- paste('MATCH p=()-[*0..]->(n:Node {id:"22914"})-[*0..]->() return p',sep="")
paths <- RNeo4j::getPaths(graph,queryTest)
paths = lapply(paths,nodes)
library("RNeo4j")
paths = lapply(paths,nodes)
queryTest <- paste('MATCH p=()-[*0..]->(n:Node {id:"21548"})-[*0..]->() return p',sep="")
paths <- RNeo4j::getPaths(graph,queryTest)
paths = lapply(paths,nodes)
queryTest <- paste('MATCH p=()-[*0..]->(n:Node {id:"21549"})-[*0..]->() return p',sep="")
paths <- RNeo4j::getPaths(graph,queryTest)
paths = lapply(paths,nodes)
paths
c(1,2,3,4,1,2)
name1 <- unlist(lapply(paths[[count]],'[[','name'))
name1 <- unlist(lapply(paths[[1]],'[[','name'))
unlist(lapply(paths[[1]],'[[','name'))
unlist(lapply(paths[[12]],'[[','name'))
unlist(lapply(paths[[15]],'[[','name'))
(1==2)||(2==2)
(1==2)||(2==1)
(1==2)|(2==1)
!((1==2)|(2==1))
!((1==2)||(2==1))
library(shiny); runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
1!=2
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
"a"=="a"
"a"=="ac"
"a"==NULL
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
install.packages("shinyjs")
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
install.packages("V8")
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
install.packages("gRain")
a <- cptable(~asia, values=c(1,99),levels=yn)
a <- grain::cptable(~asia, values=c(1,99),levels=yn)
a <- gRain::cptable(~asia, values=c(1,99),levels=yn)
install.packages("RBGL")
data(coronary)
data("coronary")
install.packages("bnlearn")
data("coronary")
install.packages("ACSWR")
data("coronary")
data(coronary)
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
library(shiny); runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp()
library(plotly)
library(shiny)
library(shinyjs)
library("RNeo4j")
graph=RNeo4j::startGraph("192.168.99.100:7474/db/data",username="neo4j",password="neo")
nodes.x=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.x")))
nodes.y=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.y")))
nodes.z=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.z")))
display <- ""
action <- 0
ui <- fluidPage(
useShinyjs(),
extendShinyjs(text = "shinyjs.resetClick = function() { Shiny.onInputChange('.clientValue-plotly_click-plot', 'null'); }"),
actionButton("reset", "Reset plotly click value"),
textInput("search", "Search", ""),
actionButton("enter", "Go!"),
plotlyOutput("plot"),
plotlyOutput("click")
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
object1 <- plot_ly(x = nodes.x, y = nodes.y, z = nodes.z, type = "scatter3d", mode='markers', hoverinfo="text+z", marker= list(size=2,color='red'), text=nodes.text, key=nodes.id)
object2 <- plot_ly(x = edge.x, y = edge.y, z = edge.z,type="scatter3d" ,mode='lines', hoverinfo='none', opacity=0.2, line=list(color='cyan'))
combinedObj<-subplot(object1,object2)
})
observeEvent(input$reset, {
js$resetClick()
})
output$click <- renderPlotly({
d <- event_data("plotly_click")
search <- NULL
input$enter
if(action<input$enter) {
search <- input$search
action <<- input$enter
}
if ((is.null(d) || is.null(d$key)) && is.null(search)){
plot_ly(x=0,y=0,z=0,type="scatter3d",mode='markers',marker=list(size=5,color='black'))
}else if (!(is.null(d) || is.null(d$key)) && display != d$key){
display <<- d$key
pathQuery <- paste('MATCH p=()-[*0..]->(n:Node {id:"',as.character(d$key),'"})-[*0..]->() return p',sep="")
path <- RNeo4j::getPaths(graph,pathQuery)
nodes.path <- lapply(path,nodes)
plotlyObject = plot_ly(x=0, y=0, z=0, type="scatter3d", marker=list(size=5,color='red'), mode='lines+markers')
count = 1
xValues <- c()
yValues <- c()
zValues <- c()
nodes.names <- c()
nodes.id <- c()
while(count <= length(nodes.path)){
listNodesX <- unlist(lapply(nodes.path[[count]],'[[','x'))
listNodesY <- unlist(lapply(nodes.path[[count]],'[[','y'))
listNodesZ <- unlist(lapply(nodes.path[[count]],'[[','z'))
names <- unlist(lapply(nodes.path[[count]],'[[','name'))
ids <- unlist(lapply(nodes.path[[count]],'[[','id'))
if(length(listNodesX)>1){
xValues <- c(xValues,'NA',listNodesX)
yValues <- c(yValues,'NA',listNodesY)
zValues <- c(zValues,'NA',listNodesZ)
nodes.names <- c(nodes.names,'NA',names)
nodes.id <- c(nodes.id,'NA',ids)
}
count=count+1
}
plotlyObject1 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='markers', hoverinfo = 'text+z', marker = list(size=2,color='red'), text = nodes.names, key = nodes.id,height=700,width=1500)
plotlyObject2 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='lines', hoverinfo = 'none', line = list(color='yellow'))
subplot(plotlyObject1,plotlyObject2)
} else if (display != search){
display <<- search
pathQuery <- paste('MATCH p=()-[*0..]->(n:Node {name:"',as.character(search),'"})-[*0..]->() return p',sep="")
path <- RNeo4j::getPaths(graph,pathQuery)
nodes.path <- lapply(path,nodes)
plotlyObject = plot_ly(x=0, y=0, z=0, type="scatter3d", marker=list(size=5,color='red'), mode='lines+markers')
count = 1
xValues <- c()
yValues <- c()
zValues <- c()
nodes.names <- c()
nodes.id <- c()
while(count <= length(nodes.path)){
listNodesX <- unlist(lapply(nodes.path[[count]],'[[','x'))
listNodesY <- unlist(lapply(nodes.path[[count]],'[[','y'))
listNodesZ <- unlist(lapply(nodes.path[[count]],'[[','z'))
names <- unlist(lapply(nodes.path[[count]],'[[','name'))
ids <- unlist(lapply(nodes.path[[count]],'[[','id'))
if(length(listNodesX)>1){
xValues <- c(xValues,'NA',listNodesX)
yValues <- c(yValues,'NA',listNodesY)
zValues <- c(zValues,'NA',listNodesZ)
nodes.names <- c(nodes.names,'NA',names)
nodes.id <- c(nodes.id,'NA',ids)
}
count=count+1
}
plotlyObject1 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='markers', hoverinfo = 'text+z', marker = list(size=2,color='red'), text = nodes.names, key = nodes.id)
plotlyObject2 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='lines', hoverinfo = 'none', line = list(color='yellow'))
subplot(plotlyObject1,plotlyObject2)
}
})
}
shinyApp(ui, server)
display <- ""
action <- 0
ui <- fluidPage(
#useShinyjs(),
#extendShinyjs(text = "shinyjs.resetClick = function() { Shiny.onInputChange('.clientValue-plotly_click-plot', 'null'); }"),
actionButton("reset", "Reset plotly click value"),
textInput("search", "Search", ""),
actionButton("enter", "Go!"),
plotlyOutput("plot"),
plotlyOutput("click")
)
options(browser="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe")
server <- function(input, output, session) {
output$plot <- renderPlotly({
object1 <- plot_ly(x = nodes.x, y = nodes.y, z = nodes.z, type = "scatter3d", mode='markers', hoverinfo="text+z", marker= list(size=2,color='red'), text=nodes.text, key=nodes.id)
object2 <- plot_ly(x = edge.x, y = edge.y, z = edge.z,type="scatter3d" ,mode='lines', hoverinfo='none', opacity=0.2, line=list(color='cyan'))
combinedObj<-subplot(object1,object2)
})
#observeEvent(input$reset, {
#  js$resetClick()
#})
output$click <- renderPlotly({
d <- event_data("plotly_click")
search <- NULL
input$enter
if(action<input$enter) {
search <- input$search
action <<- input$enter
}
if ((is.null(d) || is.null(d$key)) && is.null(search)){
plot_ly(x=0,y=0,z=0,type="scatter3d",mode='markers',marker=list(size=5,color='black'))
}else if (!(is.null(d) || is.null(d$key)) && display != d$key){
display <<- d$key
pathQuery <- paste('MATCH p=()-[*0..]->(n:Node {id:"',as.character(d$key),'"})-[*0..]->() return p',sep="")
path <- RNeo4j::getPaths(graph,pathQuery)
nodes.path <- lapply(path,nodes)
plotlyObject = plot_ly(x=0, y=0, z=0, type="scatter3d", marker=list(size=5,color='red'), mode='lines+markers')
count = 1
xValues <- c()
yValues <- c()
zValues <- c()
nodes.names <- c()
nodes.id <- c()
while(count <= length(nodes.path)){
listNodesX <- unlist(lapply(nodes.path[[count]],'[[','x'))
listNodesY <- unlist(lapply(nodes.path[[count]],'[[','y'))
listNodesZ <- unlist(lapply(nodes.path[[count]],'[[','z'))
names <- unlist(lapply(nodes.path[[count]],'[[','name'))
ids <- unlist(lapply(nodes.path[[count]],'[[','id'))
if(length(listNodesX)>1){
xValues <- c(xValues,'NA',listNodesX)
yValues <- c(yValues,'NA',listNodesY)
zValues <- c(zValues,'NA',listNodesZ)
nodes.names <- c(nodes.names,'NA',names)
nodes.id <- c(nodes.id,'NA',ids)
}
count=count+1
}
plotlyObject1 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='markers', hoverinfo = 'text+z', marker = list(size=2,color='red'), text = nodes.names, key = nodes.id,height=700,width=1500)
plotlyObject2 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='lines', hoverinfo = 'none', line = list(color='yellow'))
subplot(plotlyObject1,plotlyObject2)
} else if (display != search){
display <<- search
pathQuery <- paste('MATCH p=()-[*0..]->(n:Node {name:"',as.character(search),'"})-[*0..]->() return p',sep="")
path <- RNeo4j::getPaths(graph,pathQuery)
nodes.path <- lapply(path,nodes)
plotlyObject = plot_ly(x=0, y=0, z=0, type="scatter3d", marker=list(size=5,color='red'), mode='lines+markers')
count = 1
xValues <- c()
yValues <- c()
zValues <- c()
nodes.names <- c()
nodes.id <- c()
while(count <= length(nodes.path)){
listNodesX <- unlist(lapply(nodes.path[[count]],'[[','x'))
listNodesY <- unlist(lapply(nodes.path[[count]],'[[','y'))
listNodesZ <- unlist(lapply(nodes.path[[count]],'[[','z'))
names <- unlist(lapply(nodes.path[[count]],'[[','name'))
ids <- unlist(lapply(nodes.path[[count]],'[[','id'))
if(length(listNodesX)>1){
xValues <- c(xValues,'NA',listNodesX)
yValues <- c(yValues,'NA',listNodesY)
zValues <- c(zValues,'NA',listNodesZ)
nodes.names <- c(nodes.names,'NA',names)
nodes.id <- c(nodes.id,'NA',ids)
}
count=count+1
}
plotlyObject1 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='markers', hoverinfo = 'text+z', marker = list(size=2,color='red'), text = nodes.names, key = nodes.id)
plotlyObject2 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='lines', hoverinfo = 'none', line = list(color='yellow'))
subplot(plotlyObject1,plotlyObject2)
}
})
}
shinyApp(ui, server)
display <- ""
action <- 0
ui <- fluidPage(
#useShinyjs(),
#extendShinyjs(text = "shinyjs.resetClick = function() { Shiny.onInputChange('.clientValue-plotly_click-plot', 'null'); }"),
actionButton("reset", "Reset plotly click value"),
textInput("search", "Search", ""),
actionButton("enter", "Go!"),
plotlyOutput("plot"),
plotlyOutput("click")
)
options(browser="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe")
server <- function(input, output, session) {
output$plot <- renderPlotly({
object1 <- plot_ly(x = nodes.x, y = nodes.y, z = nodes.z, type = "scatter3d", mode='markers', hoverinfo="text+z", marker= list(size=2,color='red'), text=nodes.text, key=nodes.id)
object2 <- plot_ly(x = edge.x, y = edge.y, z = edge.z,type="scatter3d" ,mode='lines', hoverinfo='none', opacity=0.2, line=list(color='cyan'))
combinedObj<-subplot(object1,object2)
})
#observeEvent(input$reset, {
#  js$resetClick()
#})
output$click <- renderPlotly({
d <- event_data("plotly_click")
search <- NULL
input$enter
if(action<input$enter) {
search <- input$search
action <<- input$enter
}
if ((is.null(d) || is.null(d$key)) && is.null(search)){
plot_ly(x=0,y=0,z=0,type="scatter3d",mode='markers',marker=list(size=5,color='black'))
}else if (!(is.null(d) || is.null(d$key)) && display != d$key){
display <<- d$key
pathQuery <- paste('MATCH p=()-[*0..]->(n:Node {id:"',as.character(d$key),'"})-[*0..]->() return p',sep="")
path <- RNeo4j::getPaths(graph,pathQuery)
nodes.path <- lapply(path,nodes)
plotlyObject = plot_ly(x=0, y=0, z=0, type="scatter3d", marker=list(size=5,color='red'), mode='lines+markers')
count = 1
xValues <- c()
yValues <- c()
zValues <- c()
nodes.names <- c()
nodes.id <- c()
while(count <= length(nodes.path)){
listNodesX <- unlist(lapply(nodes.path[[count]],'[[','x'))
listNodesY <- unlist(lapply(nodes.path[[count]],'[[','y'))
listNodesZ <- unlist(lapply(nodes.path[[count]],'[[','z'))
names <- unlist(lapply(nodes.path[[count]],'[[','name'))
ids <- unlist(lapply(nodes.path[[count]],'[[','id'))
if(length(listNodesX)>1){
xValues <- c(xValues,'NA',listNodesX)
yValues <- c(yValues,'NA',listNodesY)
zValues <- c(zValues,'NA',listNodesZ)
nodes.names <- c(nodes.names,'NA',names)
nodes.id <- c(nodes.id,'NA',ids)
}
count=count+1
}
plotlyObject1 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='markers', hoverinfo = 'text+z', marker = list(size=2,color='red'), text = nodes.names, key = nodes.id,height=700,width=1500)
plotlyObject2 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='lines', hoverinfo = 'none', line = list(color='yellow'))
subplot(plotlyObject1,plotlyObject2)
} else if (display != search){
display <<- search
pathQuery <- paste('MATCH p=()-[*0..]->(n:Node {name:"',as.character(search),'"})-[*0..]->() return p',sep="")
path <- RNeo4j::getPaths(graph,pathQuery)
nodes.path <- lapply(path,nodes)
plotlyObject = plot_ly(x=0, y=0, z=0, type="scatter3d", marker=list(size=5,color='red'), mode='lines+markers')
count = 1
xValues <- c()
yValues <- c()
zValues <- c()
nodes.names <- c()
nodes.id <- c()
while(count <= length(nodes.path)){
listNodesX <- unlist(lapply(nodes.path[[count]],'[[','x'))
listNodesY <- unlist(lapply(nodes.path[[count]],'[[','y'))
listNodesZ <- unlist(lapply(nodes.path[[count]],'[[','z'))
names <- unlist(lapply(nodes.path[[count]],'[[','name'))
ids <- unlist(lapply(nodes.path[[count]],'[[','id'))
if(length(listNodesX)>1){
xValues <- c(xValues,'NA',listNodesX)
yValues <- c(yValues,'NA',listNodesY)
zValues <- c(zValues,'NA',listNodesZ)
nodes.names <- c(nodes.names,'NA',names)
nodes.id <- c(nodes.id,'NA',ids)
}
count=count+1
}
plotlyObject1 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='markers', hoverinfo = 'text+z', marker = list(size=2,color='red'), text = nodes.names, key = nodes.id)
plotlyObject2 <- plot_ly(x = xValues, y = yValues, z = zValues, type = "scatter3d", mode ='lines', hoverinfo = 'none', line = list(color='yellow'))
subplot(plotlyObject1,plotlyObject2)
}
})
}
shinyApp(ui, server)
library(shiny); runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
remove()
remove(pos=-1)
runApp('F:/Atlas/Atlas-of-Learning/R/plotlyShiny.R')
library("RNeo4j")
library(rjson)
neo4j.json <- rjson::fromJSON(file = "./../config/neo4j.json")
graph=RNeo4j::startGraph(paste(substr(neo4j.json$bolt,8,nchar(neo4j.json$bolt)),":7474/db/data", sep=""), username=neo4j.json$username, password=neo4j.json$password)
nodes.x=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.x")))
nodes.y=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.y")))
nodes.z=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.z")))
nodes.text=(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.name")))
nodes.id=(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.id")))
edge.source.x=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.x")))
edge.source.y=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.y")))
edge.source.z=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.z")))
edge.target.x=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.x")))
edge.target.y=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.y")))
edge.target.z=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.z")))
edge.x=c(rbind(edge.source.x,edge.target.x,rep('NA',length(edge.source.x))))
edge.y=c(rbind(edge.source.y,edge.target.y,rep('NA',length(edge.source.x))))
edge.z=c(rbind(edge.source.z,edge.target.z,rep('NA',length(edge.source.x))))
nodes.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
edges.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
library("RNeo4j")
library(rjson)
neo4j.json <- rjson::fromJSON(file = "./../config/neo4j.json")
graph=RNeo4j::startGraph(paste(substr(neo4j.json$bolt,8,nchar(neo4j.json$bolt)),":7474/db/data", sep=""), username=neo4j.json$username, password=neo4j.json$password)
getwd()
setwd("F:\Atlas\Atlas-of-Learning\R")
setwd("F:/Atlas/Atlas-of-Learning/R")
runApp('plotlyShiny.R')
library("RNeo4j")
library(rjson)
neo4j.json <- rjson::fromJSON(file = "./../config/neo4j.json")
graph=RNeo4j::startGraph(paste(substr(neo4j.json$bolt,8,nchar(neo4j.json$bolt)),":7474/db/data", sep=""), username=neo4j.json$username, password=neo4j.json$password)
nodes.x=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.x")))
nodes.y=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.y")))
nodes.z=as.numeric(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.z")))
nodes.text=(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.name")))
nodes.id=(unlist(RNeo4j::getNodes(graph,"MATCH (p:Node) RETURN p.id")))
edge.source.x=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.x")))
edge.source.y=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.y")))
edge.source.z=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN p.z")))
edge.target.x=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.x")))
edge.target.y=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.y")))
edge.target.z=as.numeric(unlist(RNeo4j::getRels(graph,"MATCH (p:Node)-[:pre]->(a:Node) RETURN a.z")))
edge.x=c(rbind(edge.source.x,edge.target.x,rep('NA',length(edge.source.x))))
edge.y=c(rbind(edge.source.y,edge.target.y,rep('NA',length(edge.source.x))))
edge.z=c(rbind(edge.source.z,edge.target.z,rep('NA',length(edge.source.x))))
nodes.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
edges.dataFrame <- data.frame(x=nodes.x,y=nodes.y,z=nodes.z,name=nodes.text,id=nodes.id)
runApp('plotlyShiny.R')
runApp('plotlyShiny.R')
